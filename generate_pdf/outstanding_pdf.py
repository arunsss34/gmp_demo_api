import uuid
from fpdf import FPDF
import base64
from PyPDF2 import PdfWriter, PdfReader
from db_connection import py_connection
from report.py_report import get_table_config_details
import os
import time
from collections import defaultdict


def file_to_base64(file_path):
    try:
        with open(file_path, 'rb') as file:
            file_content = file.read()
            base64_encoded = base64.b64encode(file_content)
            base64_string = base64_encoded.decode('utf-8')
            return base64_string
    except Exception as e:
        return {"status": "error", "message": str(e)}


class PDF(FPDF):
    def footer(self):
        self.set_y(-15)  # Position 15 mm from the bottom
        self.set_font("Arial", "", 8)
        self.cell(0, 5, "PDF generated by:", ln=True, align='L')
        self.cell(0, 5, "www.innalytics.in", ln=True, align='L')


def get_outstanding_overview_pdf(request, decoded):  # V1 -----------> basic and full all agents api starts here
    config_details = get_table_config_details(request, decoded)
    if config_details and len(config_details) > 0:
        if request['download_pk'] == 1:
            res, outstanding, main_table, report_name, file_name, basic_agent_data = get_data(config_details[0][0], config_details[0][1], request)
            outstanding_details = get_outstanding_total(outstanding)
            base64string = generate_basic_pdf(res, request, outstanding_details, main_table, decoded, report_name,
                                              basic_agent_data)
            return {"base64string": base64string,
                    "file_name": str(file_name) + ".Pdf"}
        else:
            res, outstanding,  main_table = get_data(config_details[0][0], config_details[0][1], request)
            outstanding_details = get_outstanding_total(outstanding)
            base64string = generate_basic_pdf(res, request, outstanding_details, main_table, decoded, '', '')
            return {"base64string": base64string,
                    "file_name": str(decoded['comp_name']) + "_detailed_agent_Outstanding.Pdf"}


        # print(res, outstanding, main_table, report_name, basic_agent_data,"888888")
        # base64string = generate_basic_pdf(res, request, outstanding_details, main_table, decoded, report_name, basic_agent_data)


def get_data(report_table, report_config_fk, request):  # getting agent_info, main_table, outstanding total
    qry = ("select agent_info, main_table, outstanding_total, party_info, party_details, agent_basic_report_name, "
           "agent_basic_file_name, agent_basic_data from Reporting.") + str(report_table) + " where report_config_pk =" + str(report_config_fk)
    res = py_connection.get_result(qry)
    if request['download_pk'] == 1:
        return basic_agent_details(res[0][0]), res[0][2], res[0][1], res[0][5], res[0][6], res[0][7]  # getting basic agent details
    else:
        return full_detailed_agent_details(res[0][0], res[0][3], res[0][4]), res[0][2], res[0][1]


def basic_agent_details(procedure_name):  # Fn for getting basic agent details
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?)}'
        res, k = py_connection.call_prop1(qry, (0, 0, 1))
        lst = []

        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))
        return []

def get_outstanding_total(procedure_name):  # Fn for getting Outstanding total, no.of customers, date
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?)}'
        res, k = py_connection.call_prop_col(qry, (0, 0, 1))
        if res and len(res) > 0:
            value = int(res[0][0])
            date = res[0][1]
            customers = res[0][2]
            return value, date, customers
        else:
            return '', '', ''
    except Exception as e:
        print(str(e))
        return '', '', ''

def generate_basic_pdf(datas, request, outstanding, main_table, decoded, report_name, basic_agent_data):  # Fn to generate basic and full detailed pdf format for all agents
    if request['download_pk'] == 1:
        basic_pdf = basic_pdf_format(datas, outstanding, main_table, decoded, report_name, basic_agent_data)  # Fn to generate basic pdf format for all agents
    else:
        basic_pdf = detailed_pdf_format(datas, outstanding, decoded)

    base64_string = file_to_base64(basic_pdf)  # Fn to convert pdf as base64 string
    return base64_string


def basic_pdf_format(datas, outstanding, main_table, decoded, report_name, basic_agent_data):
    try:

        pdf = PDF()
        pdf.add_page()

        # Title
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
        pdf.ln(3)

        pdf.set_font("Arial", "", 10)
        pdf.cell(0, 6, str(report_name), ln=True)

        # First, generate PDF for 'Lucky Yarns'
        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10, "Lucky Yarn Tex India Private Limited", ln=True, align='C')
        pdf.ln(2)

        lucky_yarns_agents = [agent_data for agent_data in datas if agent_data['Company'] == 'Lucky Yarn Tex India Private Limited']
        lucky_yarns_total = 0

        for agent_data in lucky_yarns_agents:
            agent_id = agent_data['AgentID']
            data = get_agent_basic_data(agent_id, 'OutstandingLuckyYarnsSpinning', basic_agent_data)

            # Centered company name
            pdf.set_font("Arial", "B", 12)

            # Set the text color to black
            pdf.set_text_color(0, 0, 0)

            # Center the "Agent: <AgentName>" text
            page_width = pdf.w - 2 * pdf.l_margin
            text = f"AgentName: {agent_data['AgentName']}"
            if pdf.get_y() > 250:  # Adjust this value as per your page's layout
                pdf.add_page()
            text_width = pdf.get_string_width(text)
            x_position = (page_width - text_width) / 2
            pdf.set_x(x_position)
            pdf.cell(text_width, 8, txt=text, ln=True)
            # pdf.ln()

            # Set the font for the table headers
            pdf.set_font("Arial", "B", 8)

            # Define column headers and widths
            columns = [
                ("Customer Name", 95),
                ("Balance Amount", 80)
            ]

            # Print headers, centered
            for header, width in columns:
                pdf.cell(width, 10, header, 1, 0, 'C')
            pdf.ln(10)

            # Set the font for the table data
            pdf.set_font("Arial", "", 8)

            # Print data rows, centered
            for row in data:
                pdf.cell(95, 10, str(row['CustomerName']), 1, 0, 'C')
                pdf.cell(80, 10, str(row['BalanceAmount']), 1, 0, 'C')
                pdf.ln(10)

            # Add totals at the bottom (optional)
            total_pending = sum(float(row['BalanceAmount']) for row in data)
            lucky_yarns_total += total_pending
            pdf.set_font("Arial", "B", 10)
            pdf.cell(95, 10, "Agent Total", 1, 0, 'C')
            pdf.cell(80, 10, f"{total_pending:,.2f}", 1, 0, 'C')
            pdf.ln(10)

            pdf.ln(5)

        # Then, generate PDF for 'Lucky Weaves'
        pdf.set_font("Arial", "B", 15)
        pdf.cell(0, 10, "Lucky Weaves India Private Limited", ln=True, align='C')
        pdf.ln(3)

        lucky_weaves_agents = [agent_data for agent_data in datas if agent_data['Company'] ==
                               'Lucky Weaves India Private Limited']
        lucky_weaves_total = 0
        for agent_data in lucky_weaves_agents:
            agent_id = agent_data['AgentID']
            data = get_agent_basic_data(agent_id, 'OutstandingLuckyWeavesSpinning', basic_agent_data)

            # Centered company name
            pdf.set_font("Arial", "B", 12)

            # Set the text color to black
            pdf.set_text_color(0, 0, 0)

            # Center the "Agent: <AgentName>" text
            page_width = pdf.w - 2 * pdf.l_margin
            text = f"AgentName: {agent_data['AgentName']}"
            if pdf.get_y() > 250:  # Adjust this value as per your page's layout
                pdf.add_page()
            text_width = pdf.get_string_width(text)
            x_position = (page_width - text_width) / 2
            pdf.set_x(x_position)
            pdf.cell(text_width, 8, txt=text, ln=True)
            # pdf.ln(8)

            # Set the font for the table headers
            pdf.set_font("Arial", "B", 8)

            # Define column headers and widths
            columns = [
                ("Customer Name", 95),
                ("Balance Amount", 80)
            ]

            # Print headers, centered
            for header, width in columns:
                pdf.cell(width, 10, header, 1, 0, 'C')
            pdf.ln(10)

            # Set the font for the table data
            pdf.set_font("Arial", "", 8)

            # Print data rows, centered
            for row in data:
                pdf.cell(95, 10, str(row['CustomerName']), 1, 0, 'C')
                pdf.cell(80, 10, str(row['BalanceAmount']), 1, 0, 'C')
                pdf.ln(10)

            # Add totals at the bottom (optional)
            total_pending = sum(float(row['BalanceAmount']) for row in data)
            lucky_weaves_total += total_pending
            pdf.set_font("Arial", "B", 10)
            pdf.cell(95, 10, "Agent Total", 1, 0, 'C')
            pdf.cell(80, 10, f"{total_pending:,.2f}", 1, 0, 'C')
            pdf.ln(10)

            pdf.ln(8)

        pdf.set_font("Arial", "B", 10)
        pdf.cell(95, 10, "Lucky Yarn Tex India Private Limited Total", 1, 0, 'C')
        pdf.cell(80, 10, f"{lucky_yarns_total:,.2f}", 1, 0, 'C')
        pdf.ln(10)
        pdf.set_font("Arial", "B", 10)
        pdf.cell(95, 10, "Lucky Weaves India Private Limited Total", 1, 0, 'C')
        pdf.cell(80, 10, f"{lucky_weaves_total:,.2f}", 1, 0, 'C')
        pdf.ln(10)
        pdf.set_font("Arial", "B", 10)
        pdf.cell(95, 10, "Grand Total", 1, 0, 'C')
        pdf.cell(80, 10, f"{outstanding[0]:,.2f}", 1, 0, 'C')

        pdf.ln(20)

        # pdf.set_font("Arial", "", 9)
        # pdf.cell(0, 6, "pdf generated by:", ln=True)
        # pdf.cell(0, 6, "www.innalytics.in", ln=True)

        base_dir = os.getenv("FILE_PATH", '../temp')
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
        pdf.output(Out_path, 'F')
        out = PdfWriter()
        file = PdfReader(Out_path)
        num = len(file.pages)
        for idx in range(num):
            page = file.pages[idx]
            out.add_page(page)
        with open(Out_path, "wb") as f:
            out.write(f)
        return Out_path

    except Exception as e:
        return {"status": "error", "message": str(e)}


# def group_agent_data(datas):
#     grouped_agents = defaultdict(lambda: {'TotalBalanceAmount': 0, 'Companies': set()})
#
#     for data in datas:
#         key = (data['AgentName'], data['AgentContactNo'])
#         grouped_agents[key]['TotalBalanceAmount'] += data['TotalBalanceAmount']
#         grouped_agents[key]['Companies'].add(data['Company'])
#
#     # Convert set of companies back to list for better display
#     for agent in grouped_agents.values():
#         agent['Companies'] = list(agent['Companies'])
#
#     return grouped_agents



def get_agent_basic_data(agent_id, main_table, procedure_name):
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?)}'
        res, k = py_connection.call_prop_col(qry, (agent_id, main_table))
        lst = []
        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))


def get_agent_data(agent_id, main_table):  # Fn to get the required datas
    try:
        qry =("SELECT AgentName, AgentID, CustomerName,CustomerID, BalanceAmount,FORMAT(CAST(InvoiceDate AS DATE), 'dd-MM-yyyy') as InvoiceDate,InvoiceNo,"
              "FORMAT(CAST(InvoiceDate AS DATE), 'dd-MM-yyyy') as DueDate,PendingDays  FROM dbo." + str(main_table) +
              " where AgentID = " + str(agent_id) + " Group BY AgentID, AgentName,CustomerName,CustomerID,BalanceAmount,InvoiceDate,InvoiceNo,"
              "DueDate,PendingDays  order by CustomerName asc , cast(InvoiceDate as date) asc")
        res, k = py_connection.get_result_col(qry)
        lst = []
        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))
        return []


def full_detailed_agent_details(agent_info, party_info, party_details):
    try:
        agent_details = basic_agent_details(agent_info)
        lst = []
        if agent_details and len(agent_details) > 0:
            for row in agent_details:
                view_data = dict(zip(row.keys(), row.values()))
                view_data['party_info'] = get_party_info(view_data['AgentID'], party_info, party_details, view_data['Company'])
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))
        return []

def get_party_info(agent_id, procedure_name, party_details, Company):
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?)}'
        res, k = py_connection.call_prop1(qry, (agent_id, 0, 0, 1, Company))
        lst = []
        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                view_data['party_details'] = get_party_details(agent_id, view_data['CustomerID'], party_details, Company)
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))


def get_party_details(agent_id, customer_id, procedure_name, Company):
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?,?)}'
        res, k = py_connection.call_prop1(qry, (agent_id, customer_id, 0, 0, 1, Company))
        lst = []
        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))


# def detailed_pdf_format(datas, outstanding, decoded):
#     try:
#         print(datas, "---")
#         # Initialize PDF
#         pdf = PDF()
#         pdf.add_page()
#
#         # Title
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
#         pdf.ln(3)
#
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True, align='L')
#         pdf.ln(2)
#         # Calculating total customers and amount
#         # total_customers = sum(len(agent['party_info']) for agent in datas)
#         print("33333")
#         total_amount = sum(agent['TotalBalanceAmount'] for agent in datas)
#         print(total_amount, "------")
#         pdf.set_font("Arial", "B", 10)
#         # pdf.cell(0, 6, f"Total Customers: {total_customers}", ln=True)
#         pdf.cell(0, 6, f"Total Amount: {total_amount}", ln=True)
#         pdf.ln(4)
#
#         for agent_data in datas:
#             if pdf.get_y() > 250:  # Adjust this value as per your page's layout
#                 pdf.add_page()
#             agent_name = agent_data['AgentName']
#             print(agent_name, "09999")
#             agent_total = 0  # Initialize agent total
#
#             # Centered agent name
#             pdf.set_font("Arial", "B", 10)
#             text = f"Agent: {agent_name}"
#             text_width = pdf.get_string_width(text)
#             page_width = pdf.w - 2 * pdf.l_margin
#             x_position = (page_width - text_width) / 2
#             pdf.set_x(x_position)
#             pdf.cell(text_width, 8, txt=text, ln=True)
#             pdf.ln(8)
#             for customer in agent_data['party_info']:
#                 print("2222222")
#                 customer_name = customer['CustomerName']
#                 party_total = 0  # Initialize party total
#
#                 # Display customer name
#                 pdf.set_font("Arial", "B", 9)
#                 pdf.cell(0, 6, f"Party: {customer_name}", ln=True)
#                 pdf.ln(5)
#
#                 print("999777")
#                 # Table headers
#                 pdf.set_font("Arial", "B", 8)
#                 columns = [
#                     ("Invoice No.", 22),
#                     ("Invoice Date", 22),
#                     ("Terms", 22),
#                     ("On Acc", 23),
#                     ("Amount", 29),
#                     ("Balance", 29),
#                     ("Pending Days", 25),
#                     ("PDC", 25)
#                 ]
#
#                 for header, width in columns:
#                     pdf.cell(width, 6, header, border=1, ln=0, align='C')
#                 pdf.ln()
#
#                 # Table data
#                 pdf.set_font("Arial", "", 8)
#                 last_detail = None  # Track the last detail record for TDS calculation
#                 for idx, detail in enumerate(customer['party_details'], start=1):
#                     print("777777777")
#                     invoice_no = detail['InvoiceNo']
#                     invoice_date = detail['InvoiceDate']
#                     terms = detail['Terms']
#                     acc_no = f"{detail['OnAccount']:.2f}"
#                     amount = f"{detail['NetAmount']:.2f}"
#                     balance = f"{detail['BalanceAmount']:.2f}"
#                     overdue_days = str(detail['PendingDays'])
#                     pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"
#
#                     row = [
#                         invoice_no,
#                         invoice_date,
#                         terms,
#                         acc_no,
#                         amount,
#                         balance,
#                         overdue_days,
#                         pdc_date
#                     ]
#
#                     print("444444")
#                     # Set fill color if PDC Date is present
#                     if pdc_date != "N/A":
#                         pdf.set_fill_color(255, 200, 200)  # Light red
#                     else:
#                         pdf.set_fill_color(255, 255, 255)  # White
#
#                     for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
#                         pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
#                     pdf.ln()
#
#                     party_total += detail['BalanceAmount']  # Sum the party total
#                     last_detail = detail  # Store the last detail for TDS
#
#                 # Check if there were any details, and display TDS and Party Total
#                 if last_detail:
#                     # Calculate the width of the TDS text
#                     pdf.set_font("Arial", "B", 8)
#                     tds_text = f"TDS: {last_detail['TDSBalanceAmount']:.2f}"
#                     tds_width = pdf.get_string_width(tds_text) + 5  # Add a bit of padding
#
#                     # Calculate the width of the Party Total text
#                     party_total_text = f"Party Total: {party_total:.2f}"
#                     party_total_width = pdf.get_string_width(party_total_text) + 5  # Add a bit of padding
#
#                     # Print TDS (left-aligned)
#                     pdf.set_text_color(0, 0, 0)
#                     pdf.cell(tds_width, 6, tds_text, ln=0, align='L')
#
#                     # Move the cursor to the right to align the Party Total text
#                     pdf.set_x(page_width - party_total_width)
#                     pdf.cell(party_total_width, 6, party_total_text, ln=1, align='R')
#                 pdf.ln(5)
#
#                 agent_total += party_total  # Sum the agent total
#                 print(agent_total, "0000000")
#                 # Agent Total
#             pdf.set_font("Arial", "B", 10)
#             pdf.cell(0, 6, f"Agent Total: {agent_total:.2f}", ln=True, align='R')
#             pdf.ln(10)
#
#         pdf.ln(20)
#
#         # pdf.set_font("Arial", "", 9)
#         # pdf.cell(0, 6, "pdf generated by:", ln=True)
#         # pdf.cell(0, 6, "www.innalytics.in", ln=True)
#
#         base_dir = os.getenv("FILE_PATH", '../temp')
#         if not os.path.exists(base_dir):
#             os.makedirs(base_dir)
#         Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
#         pdf.output(Out_path, 'F')
#         out = PdfWriter()
#         file = PdfReader(Out_path)
#         num = len(file.pages)
#         for idx in range(num):
#             page = file.pages[idx]
#             out.add_page(page)
#         with open(Out_path, "wb") as f:
#             out.write(f)
#         return Out_path
#     except Exception as e:
#         print(str(e))

# def detailed_pdf_format(datas, outstanding, decoded):
#     try:
#         # Initialize PDF
#         pdf = PDF()
#         pdf.add_page()
#
#         # Title
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
#         pdf.ln(3)
#
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True, align='L')
#         pdf.ln(2)
#
#         total_amount = sum(agent['TotalBalanceAmount'] for agent in datas)
#         pdf.set_font("Arial", "B", 10)
#         pdf.cell(0, 6, f"Total Amount: {total_amount}", ln=True)
#         pdf.ln(4)
#
#         # Group agents by company
#         for company in ['Lucky Yarns', 'Lucky Weaves']:
#             # Filter agents for the current company
#             company_agents = [agent_data for agent_data in datas if agent_data['Company'] == company]
#
#             if not company_agents:
#                 continue  # Skip if no agents for this company
#
#             # Add Company heading
#             pdf.set_font("Arial", "B", 15)
#             pdf.cell(0, 10, company, ln=True, align='C')
#             pdf.ln(5)
#
#             # Process each agent under the current company
#             for agent_data in company_agents:
#                 if pdf.get_y() > 250:  # Adjust this value as per your page's layout
#                     pdf.add_page()
#                 agent_name = agent_data['AgentName']
#                 agent_total = 0  # Initialize agent total
#
#                 # Centered agent name
#                 pdf.set_font("Arial", "B", 10)
#                 text = f"Agent: {agent_name}"
#                 text_width = pdf.get_string_width(text)
#                 page_width = pdf.w - 2 * pdf.l_margin
#                 x_position = (page_width - text_width) / 2
#                 pdf.set_x(x_position)
#                 pdf.cell(text_width, 8, txt=text, ln=True)
#                 pdf.ln(8)
#
#                 # Process customer data for this agent
#                 for customer in agent_data['party_info']:
#                     customer_name = customer['CustomerName']
#                     party_total = 0  # Initialize party total
#
#                     # Display customer name
#                     pdf.set_font("Arial", "B", 9)
#                     pdf.cell(0, 6, f"Party: {customer_name}", ln=True)
#                     pdf.ln(5)
#
#                     # Table headers
#                     pdf.set_font("Arial", "B", 8)
#                     columns = [
#                         ("Invoice No.", 22),
#                         ("Invoice Date", 22),
#                         ("Terms", 22),
#                         ("On Acc", 23),
#                         ("Amount", 29),
#                         ("Balance", 29),
#                         ("Pending Days", 25),
#                         ("PDC", 25)
#                     ]
#
#                     for header, width in columns:
#                         pdf.cell(width, 6, header, border=1, ln=0, align='C')
#                     pdf.ln()
#
#                     # Table data
#                     pdf.set_font("Arial", "", 8)
#                     last_detail = None  # Track the last detail record for TDS calculation
#                     for idx, detail in enumerate(customer['party_details'], start=1):
#                         invoice_no = detail['InvoiceNo']
#                         invoice_date = detail['InvoiceDate']
#                         terms = detail['Terms']
#                         acc_no = f"{detail['OnAccount']:.2f}"
#                         amount = f"{detail['NetAmount']:.2f}"
#                         balance = f"{detail['BalanceAmount']:.2f}"
#                         overdue_days = str(detail['PendingDays'])
#                         pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"
#
#                         row = [
#                             invoice_no,
#                             invoice_date,
#                             terms,
#                             acc_no,
#                             amount,
#                             balance,
#                             overdue_days,
#                             pdc_date
#                         ]
#
#                         # Set fill color if PDC Date is present
#                         if pdc_date != "N/A":
#                             pdf.set_fill_color(255, 200, 200)  # Light red
#                         else:
#                             pdf.set_fill_color(255, 255, 255)  # White
#
#                         for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
#                             pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
#                         pdf.ln()
#
#                         party_total += detail['BalanceAmount']  # Sum the party total
#                         last_detail = detail  # Store the last detail for TDS
#
#                     # Check if there were any details, and display TDS and Party Total
#                     if last_detail:
#                         # Calculate the width of the TDS text
#                         pdf.set_font("Arial", "B", 8)
#                         tds_text = f"TDS: {last_detail['TDSBalanceAmount']:.2f}"
#                         tds_width = pdf.get_string_width(tds_text) + 5  # Add a bit of padding
#
#                         # Calculate the width of the Party Total text
#                         party_total_text = f"Party Total: {party_total:.2f}"
#                         party_total_width = pdf.get_string_width(party_total_text) + 5  # Add a bit of padding
#
#                         # Print TDS (left-aligned)
#                         pdf.set_text_color(0, 0, 0)
#                         pdf.cell(tds_width, 6, tds_text, ln=0, align='L')
#
#                         # Move the cursor to the right to align the Party Total text
#                         pdf.set_x(page_width - party_total_width)
#                         pdf.cell(party_total_width, 6, party_total_text, ln=1, align='R')
#                     pdf.ln(5)
#
#                     agent_total += party_total  # Sum the agent total
#
#                 # Agent Total
#                 pdf.set_font("Arial", "B", 10)
#                 pdf.cell(0, 6, f"Agent Total: {agent_total:.2f}", ln=True, align='R')
#                 pdf.ln(10)
#
#         pdf.ln(20)
#
#         # Output the file
#         base_dir = os.getenv("FILE_PATH", '../temp')
#         if not os.path.exists(base_dir):
#             os.makedirs(base_dir)
#         Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
#         pdf.output(Out_path, 'F')
#         out = PdfWriter()
#         file = PdfReader(Out_path)
#         num = len(file.pages)
#         for idx in range(num):
#             page = file.pages[idx]
#             out.add_page(page)
#         with open(Out_path, "wb") as f:
#             out.write(f)
#         return Out_path
#     except Exception as e:
#         print(str(e))

def detailed_pdf_format(datas, outstanding, decoded):
    try:
        # Initialize PDF
        pdf = PDF()
        pdf.add_page()

        # Title
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
        pdf.ln(3)


        # total_amount = sum(agent['TotalBalanceAmount'] for agent in datas)
        # pdf.set_font("Arial", "B", 10)
        # pdf.cell(0, 6, f"Total Amount: {total_amount}", ln=True)
        # pdf.ln(4)

        # Initialize company totals and overall total
        lucky_yarns_total = 0
        lucky_weaves_total = 0
        overall_total = 0

        # Group agents by company
        for company in ['Lucky Yarn Tex India Private Limited', 'Lucky Weaves India Private Limited']:
            # Filter agents for the current company
            company_agents = [agent_data for agent_data in datas if agent_data['Company'] == company]

            if not company_agents:
                continue  # Skip if no agents for this company

            # Add Company heading
            pdf.set_font("Arial", "B", 13)
            pdf.cell(0, 10, company, ln=True, align='C')
            pdf.ln(2)

            # Process each agent under the current company
            for agent_data in company_agents:
                if pdf.get_y() > 250:  # Adjust this value as per your page's layout
                    pdf.add_page()
                agent_name = agent_data['AgentName']
                agent_total = 0  # Initialize agent total

                # Centered agent name
                pdf.set_font("Arial", "B", 11)
                text = f"AgentName: {agent_name}"
                text_width = pdf.get_string_width(text)
                page_width = pdf.w - 2 * pdf.l_margin
                x_position = (page_width - text_width) / 2
                pdf.set_x(x_position)
                pdf.cell(text_width, 8, txt=text, ln=True)
                pdf.ln(4)

                pdf.set_font("Arial", "B", 9)
                pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True,
                         align='L')
                pdf.ln(2)

                # Process customer data for this agent
                for customer in agent_data['party_info']:
                    customer_name = customer['CustomerName']
                    party_total = 0  # Initialize party total

                    # Display customer name
                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(0, 6, f"Party: {customer_name}", ln=True)
                    # pdf.ln(5)

                    # Table headers
                    pdf.set_font("Arial", "B", 8)
                    columns = [
                        ("Invoice No.", 22),
                        ("Invoice Date", 22),
                        ("Terms", 22),
                        ("On Acc", 23),
                        ("Amount", 29),
                        ("Balance", 29),
                        ("Pending Days", 25),
                        ("PDC", 25)
                    ]

                    for header, width in columns:
                        pdf.cell(width, 6, header, border=1, ln=0, align='C')
                    pdf.ln()

                    # Table data
                    pdf.set_font("Arial", "", 8)
                    last_detail = None  # Track the last detail record for TDS calculation
                    for idx, detail in enumerate(customer['party_details'], start=1):
                        invoice_no = detail['InvoiceNo']
                        invoice_date = detail['InvoiceDate']
                        terms = detail['Terms']
                        acc_no = f"{detail['OnAccount']:.2f}"
                        amount = f"{detail['NetAmount']:.2f}"
                        balance = f"{detail['BalanceAmount']:.2f}"
                        overdue_days = str(detail['PendingDays'])
                        pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"

                        row = [
                            invoice_no,
                            invoice_date,
                            terms,
                            acc_no,
                            amount,
                            balance,
                            overdue_days,
                            pdc_date
                        ]

                        # Set fill color if PDC Date is present
                        if pdc_date != "N/A":
                            pdf.set_fill_color(255, 200, 200)  # Light red
                        else:
                            pdf.set_fill_color(255, 255, 255)  # White

                        for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
                            pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
                        pdf.ln()

                        party_total += detail['BalanceAmount']  # Sum the party total
                        last_detail = detail  # Store the last detail for TDS

                    # Check if there were any details, and display TDS and Party Total
                    if last_detail:
                        # Calculate the width of the TDS text
                        pdf.set_font("Arial", "B", 8)
                        tds_text = f"TDS: {last_detail['TDSBalanceAmount']:.2f}"
                        tds_width = pdf.get_string_width(tds_text) + 5  # Add a bit of padding

                        # Calculate the width of the Party Total text
                        party_total_text = f"Party Total: {party_total:.2f}"
                        party_total_width = pdf.get_string_width(party_total_text) + 5  # Add a bit of padding

                        # Print TDS (left-aligned)
                        pdf.set_text_color(0, 0, 0)
                        pdf.cell(tds_width, 6, tds_text, ln=0, align='L')

                        # Move the cursor to the right to align the Party Total text
                        pdf.set_x(page_width - party_total_width)
                        pdf.cell(party_total_width, 6, party_total_text, ln=1, align='R')
                    pdf.ln(2)

                    agent_total += party_total  # Sum the agent total

                # Update company total and overall total
                if company == 'Lucky Yarn Tex India Private Limited':
                    lucky_yarns_total += agent_total
                elif company == 'Lucky Weaves India Private Limited':
                    lucky_weaves_total += agent_total

                overall_total += agent_total  # Add to overall total

                # Agent Total
                pdf.set_font("Arial", "B", 10)
                pdf.cell(0, 6, f"Agent Total: {agent_total:.2f}", ln=True, align='R')
                pdf.ln(10)

        # Company Totals
        pdf.set_font("Arial", "B", 10)
        pdf.cell(0, 6, f"Lucky Yarn Tex India Private Limited Total: {lucky_yarns_total:.2f}", ln=True, align='R')
        pdf.cell(0, 6, f"Lucky Weaves India Private Limited Total: {lucky_weaves_total:.2f}", ln=True, align='R')
        pdf.cell(0, 6, f"Grand Total: {overall_total:.2f}", ln=True, align='R')

        pdf.ln(20)

        # Output the file
        base_dir = os.getenv("FILE_PATH", '../temp')
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
        pdf.output(Out_path, 'F')
        out = PdfWriter()
        file = PdfReader(Out_path)
        num = len(file.pages)
        for idx in range(num):
            page = file.pages[idx]
            out.add_page(page)
        with open(Out_path, "wb") as f:
            out.write(f)
        return Out_path
    except Exception as e:
        print(str(e))


# --------------------------------------------------------------------------> party info pdf starts here

def get_outstanding_party_overview_pdf(request, decoded):  # V1 -----------> basic and full all agents api starts here
    config_details = get_table_config_details(request, decoded)
    if config_details and len(config_details) > 0:
        res, outstanding, main_table = get_party_data(config_details[0][0], config_details[0][1], request)
        outstanding_details = get_party_outstanding_total(outstanding, request)
        base64string = generate_basic_party_pdf(res, request, outstanding_details, main_table, decoded)
        if request['download_pk'] == 1:
            return {"base64string": base64string,
                    "file_name": str(decoded['comp_name']) + "_basic_party_Outstanding.Pdf"}
        else:
            return {"base64string": base64string,
                    "file_name": str(decoded['comp_name']) + "_detailed_party_Outstanding.Pdf"}


def get_party_data(report_table, report_config_fk, request):  # getting agent_info, main_table, outstanding total
    qry = "select main_table, outstanding_party_total, party_info, party_details from Reporting." + str(
        report_table) + " where report_config_pk =" + str(report_config_fk)
    res = py_connection.get_result(qry)
    if request['download_pk'] == 1:
        return basic_party_details(res[0][2], request), res[0][1], res[0][0]  # getting basic agent details
    else:
        return full_detailed_party_details(res[0][2], res[0][3], request), res[0][1], res[0][0]


def basic_party_details(procedure_name, request):
    try:
        lst = []

        for agent in request['agent_id']:
            agent_id = agent['id']
            company = agent['Company']
            qry = '{call Reporting.' + str(procedure_name) + ' (?,?,?,?,?)}'
            res, k = py_connection.call_prop1(qry, (agent_id, 0, 0, 1, company))

            if res and len(res) > 0:
                for row in res:
                    view_data = dict(zip(k, row))
                    lst.append(view_data)
        return lst
    except Exception as e:
        print(str(e))
        return []

def get_party_outstanding_total(procedure_name, request):  # Fn for getting Outstanding total, no.of customers, date
    try:
        total_value = 0
        date = None  # Initialize date to None or an appropriate default value
        customers = None

        # Loop through each agent in the request
        for agent in request["agent_id"]:
            agent_id = agent['id']
            company_name = agent['Company']

            # Prepare the query to call the stored procedure
            qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?)}'

            # Call the stored procedure for the specific agent_id
            res, k = py_connection.call_prop_col(qry, (agent_id, 0, 0, 1, company_name))

            # Check the result and accumulate the values
            if res and len(res) > 0:
                company_total = int(res[0][0])  # Assuming total is in the first column
                date = res[0][1]  # This will only be assigned if res has data
                customers = res[0][2]

                # Add the company total to the overall total
                total_value += company_total

        return total_value, date, customers
    except Exception as e:
        print(str(e))
        return '', '', ''


def generate_basic_party_pdf(datas, request, outstanding, main_table, decoded):  # Fn to generate basic and full detailed pdf format for all agents
    if request['download_pk'] == 1:
        basic_pdf = basic_party_pdf_format(datas, outstanding, main_table, decoded, request)  # Fn to generate basic pdf format for all agents
    else:
        basic_pdf = detailed_party_pdf_format(datas, outstanding, decoded)

    base64_string = file_to_base64(basic_pdf)  # Fn to convert pdf as base64 string
    return base64_string


# def basic_party_pdf_format(datas, outstanding, main_table, decoded, request):
#     try:
#         print(datas, "0000")
#         pdf = PDF()
#         pdf.add_page()
#
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
#         pdf.ln(3)
#
#         pdf.set_font("Arial", "", 9)
#         pdf.cell(0, 6, "List of Outstanding due:", ln=True)
#         print("-----------")
#
#         agents = request['agent_id']
#
#         for agent in agents:
#             agent_id = agent['id']  # Get the agent's ID
#             company = agent['Company']
#             if company == 'Lucky Yarns':
#                 data = get_agent_data(agent_id, 'OutstandingLuckyYarnsSpinning')
#             else:
#                 data = get_agent_data(agent_id, 'OutstandingLuckyWeavesSpinning')
#
#         # Centered company name
#         pdf.set_font("Arial", "B", 10)
#
#         # Set the text color to black
#         pdf.set_text_color(0, 0, 0)
#
#         # Center the "Agent: <AgentName>" text
#         page_width = pdf.w - 2 * pdf.l_margin
#         text = f"Agent: {datas[0]['AgentName']}"
#
#         if pdf.get_y() > 250:  # Adjust this value as per your page's layout
#             pdf.add_page()
#         text_width = pdf.get_string_width(text)
#         x_position = (page_width - text_width) / 2
#         pdf.set_x(x_position)
#         pdf.cell(text_width, 8, txt=text, ln=True)
#         pdf.ln(8)
#
#         # Group data by CustomerName
#         customers = {}
#         for row in data:
#             customer_name = row['CustomerName']
#             if customer_name not in customers:
#                 customers[customer_name] = []
#             customers[customer_name].append(row)
#
#         # Set the font for the table headers
#         pdf.set_font("Arial", "B", 8)
#         columns = [
#             ("Invoice Date", 38),
#             ("Invoice No.", 38),
#             ("Pending Amount", 38),
#             ("Due on", 38),
#             ("Overdue by days", 38)
#         ]
#
#         for customer_name, customer_data in customers.items():
#             # Print Customer name
#             pdf.set_font("Arial", "B", 9)
#             if pdf.get_y() > 200:  # Adjust this value as per your page's layout
#                 pdf.add_page()
#             pdf.cell(0, 8, f"Party: {customer_name}", ln=True)
#
#             # Print headers, centered
#             pdf.set_font("Arial", "B", 8)
#             for header, width in columns:
#                 pdf.cell(width, 10, header, 1, 0, 'C')
#             pdf.ln(10)
#
#             # Print data rows, centered
#             pdf.set_font("Arial", "", 8)
#             total_balance = 0  # Initialize total balance for the customer
#             for row in customer_data:
#                 pdf.cell(38, 10, str(row['InvoiceDate']), 1, 0, 'C')
#                 pdf.cell(38, 10, row['InvoiceNo'], 1, 0, 'C')
#                 pdf.cell(38, 10, str(row['BalanceAmount']), 1, 0, 'C')
#                 pdf.cell(38, 10, str(row['DueDate']), 1, 0, 'C')
#                 pdf.cell(38, 10, str(row['PendingDays']), 1, 0, 'C')
#                 pdf.ln(10)
#                 total_balance += float(row['BalanceAmount'])  # Add to total balance
#
#             # Print customer total
#             pdf.set_font("Arial", "B", 8)
#             pdf.cell(76, 10, 'Party Total', 1, 0, 'C')
#             pdf.cell(114, 10, f"{total_balance:,.2f}", 1, 0, 'C')
#             pdf.ln(15)
#
#         # Add totals at the bottom (optional)
#         pdf.set_font("Arial", "B", 10)
#         pdf.cell(100, 10, "Grand Total", 1, 0, 'C')
#         pdf.cell(95, 10, f"{outstanding[0]:,.2f}", 1, 0, 'C')
#         pdf.ln(20)
#
#         # pdf.set_font("Arial", "", 9)
#         # pdf.cell(0, 6, "pdf generated by:", ln=True)
#         # pdf.cell(0, 6, "www.innalytics.in", ln=True)
#
#         base_dir = os.getenv("FILE_PATH", '../temp')
#         if not os.path.exists(base_dir):
#             os.makedirs(base_dir)
#         Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
#         pdf.output(Out_path, 'F')
#         out = PdfWriter()
#         file = PdfReader(Out_path)
#         num = len(file.pages)
#         for idx in range(num):
#             page = file.pages[idx]
#             out.add_page(page)
#         with open(Out_path, "wb") as f:
#             out.write(f)
#         return Out_path
#
#     except Exception as e:
#         return {"status": "error", "message": str(e)}

def basic_party_pdf_format(datas, outstanding, main_table, decoded, request):
    try:
        pdf = PDF()
        pdf.add_page()

        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
        pdf.ln(3)

        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, datas[0]['AgentName'], ln=True, align='C')
        pdf.ln(3)

        pdf.set_font("Arial", "", 9)
        pdf.cell(0, 6, "List of Outstanding Due:", ln=True)

        agents = request['agent_id']
        total_company_balances = {'Lucky Yarn Tex India Private Limited': 0, 'Lucky Weaves India Private Limited': 0}

        # Group data by company
        for agent in agents:
            agent_id = agent['id']  # Get the agent's ID
            company = agent['Company']

            # Set the font and display the company name for the current agent
            pdf.set_font("Arial", "B", 12)
            page_width = pdf.w - 2 * pdf.l_margin

            # Center company name
            company_text_width = pdf.get_string_width(company)
            pdf.set_x((page_width - company_text_width) / 2)
            pdf.cell(company_text_width, 6, company, ln=True, align='C')  # Centered company name

            pdf.ln(2)  # Add a small line break

            # Center agent name
            # pdf.set_font("Arial", "B", 10)
            # agent_text = f"Agent: {agent_name}"
            # agent_text_width = pdf.get_string_width(agent_text)
            # pdf.set_x((page_width - agent_text_width) / 2)
            # pdf.cell(agent_text_width, 8, txt=agent_text, ln=True, align='C')  # Centered agent name
            #
            # pdf.ln(8)  # Add a line break after agent name

            # Retrieve agent data
            data = get_agent_data(agent_id, 'OutstandingLuckyYarnsSpinning' if company == 'Lucky Yarn Tex India Private Limited'
                   else 'OutstandingLuckyWeavesSpinning')

            # Centered company name
            # pdf.set_font("Arial", "B", 10)
            # pdf.set_text_color(0, 0, 0)
            #
            # # Center the "Agent: <AgentName>" text
            # page_width = pdf.w - 2 * pdf.l_margin
            # text = f"{datas[0]['AgentName']}"
            #
            # if pdf.get_y() > 250:  # Adjust this value as per your page's layout
            #     pdf.add_page()
            # text_width = pdf.get_string_width(text)
            # x_position = (page_width - text_width) / 2
            # pdf.set_x(x_position)
            # pdf.cell(text_width, 8, txt=text, ln=True, align='C')
            # pdf.ln(8)

            # Group data by CustomerName
            customers = {}
            for row in data:
                customer_name = row['CustomerName']
                if customer_name not in customers:
                    customers[customer_name] = []
                customers[customer_name].append(row)

            # Print each customer's data
            for customer_name, customer_data in customers.items():
                if pdf.get_y() > 200:  # Adjust this value as per your page's layout
                    pdf.add_page()
                pdf.cell(0, 8, f"Party: {customer_name}", ln=True)

                # Set the font for the table headers
                pdf.set_font("Arial", "B", 8)
                columns = [
                    ("Invoice Date", 38),
                    ("Invoice No.", 38),
                    ("Pending Amount", 38),
                    ("Due on", 38),
                    ("Overdue by days", 38)
                ]

                # Print headers, centered
                for header, width in columns:
                    pdf.cell(width, 10, header, 1, 0, 'C')
                pdf.ln(10)

                # Print data rows, centered
                pdf.set_font("Arial", "", 8)
                total_balance = 0  # Initialize total balance for the customer
                for row in customer_data:
                    pdf.cell(38, 10, str(row['InvoiceDate']), 1, 0, 'C')
                    pdf.cell(38, 10, row['InvoiceNo'], 1, 0, 'C')
                    pdf.cell(38, 10, f"{float(row['BalanceAmount']):,.2f}", 1, 0, 'C')
                    pdf.cell(38, 10, str(row['DueDate']), 1, 0, 'C')
                    pdf.cell(38, 10, str(row['PendingDays']), 1, 0, 'C')
                    pdf.ln(10)
                    total_balance += float(row['BalanceAmount'])  # Add to total balance

                # Print customer total
                pdf.set_font("Arial", "B", 8)
                pdf.cell(76, 10, 'Party Total', 1, 0, 'C')
                pdf.cell(114, 10, f"{total_balance:,.2f}", 1, 0, 'C')
                pdf.ln(15)

                # Update total company balance
                total_company_balances[company] += total_balance

        # Print grand totals for each company
        pdf.set_font("Arial", "B", 10)
        pdf.cell(100, 10, "Lucky Yarn Tex India Private Limited Total", 1, 0, 'C')
        pdf.cell(90, 10, f"{total_company_balances['Lucky Yarn Tex India Private Limited']:,.2f}", 1, 0, 'C')
        pdf.ln(10)

        pdf.cell(100, 10, "Lucky Weaves India Private Limited Total", 1, 0, 'C')
        pdf.cell(90, 10, f"{total_company_balances['Lucky Weaves India Private Limited']:,.2f}", 1, 0, 'C')
        pdf.ln(10)

        # Add agent total
        pdf.set_font("Arial", "B", 10)
        pdf.cell(100, 10, "Agent Total", 1, 0, 'C')
        agent_total = sum(total_company_balances.values())
        pdf.cell(90, 10, f"{agent_total:,.2f}", 1, 0, 'C')
        pdf.ln(20)

        # Save the PDF
        base_dir = os.getenv("FILE_PATH", '../temp')
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        Out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
        pdf.output(Out_path, 'F')

        out = PdfWriter()
        file = PdfReader(Out_path)
        num = len(file.pages)
        for idx in range(num):
            page = file.pages[idx]
            out.add_page(page)
        with open(Out_path, "wb") as f:
            out.write(f)
        return Out_path

    except Exception as e:
        return {"status": "error", "message": str(e)}



def full_detailed_party_details(party_info, party_details, request):
    try:
        full_party_details = get_each_party_info(request, party_info, party_details)
        if full_party_details and len(full_party_details) > 0:
            return full_party_details
        else:
            return ''

    except Exception as e:
        print(str(e))
        return []

def get_each_party_info(request, procedure_name, party_details):
    try:
        lst = []
        for agent in request['agent_id']:
            agent_id = agent['id']
            company = agent['Company']
            qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?)}'
            res, k = py_connection.call_prop1(qry, (agent_id, 0, 0, 1, company))
            if res and len(res) > 0:
                for row in res:
                    view_data = dict(zip(k, row))
                    view_data['party_details'] = get_each_party_details(agent_id, view_data['CustomerID'], party_details, company)
                    lst.append(view_data)
        return lst
    except Exception as e:
        print(str(e))

def get_each_party_details(agent_id, customer_id, procedure_name, company):
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?,?)}'
        res, k = py_connection.call_prop1(qry, (agent_id, customer_id, 0, 0, 1, company))
        lst = []
        if res and len(res) > 0:
            for row in res:
                view_data = dict(zip(k, row))
                lst.append(view_data)
            return lst
        else:
            return lst
    except Exception as e:
        print(str(e))


# def detailed_party_pdf_format(datas, outstanding, decoded):
#     try:
#         print(datas, "---")
#         # Initialize PDF
#         pdf = PDF()
#         pdf.add_page()
#
#         # Title
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
#         pdf.ln(3)
#
#         pdf.set_font("Arial", "B", 12)
#         pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True, align='L')
#         pdf.ln(2)
#
#         # Calculating total amount
#         total_amount = sum(customer['BalanceAmount'] for customer in datas)
#         pdf.set_font("Arial", "B", 10)
#         pdf.cell(0, 6, f"Agent Total: {total_amount:.2f}", ln=True)
#         pdf.ln(4)
#
#         agent_name = datas[0]['AgentName']  # Agent name is common across all customers
#
#         # Centered agent name
#         pdf.set_font("Arial", "B", 10)
#         text = f"Agent: {agent_name}"
#         text_width = pdf.get_string_width(text)
#         page_width = pdf.w - 2 * pdf.l_margin
#         x_position = (page_width - text_width) / 2
#         pdf.set_x(x_position)
#         pdf.cell(text_width, 8, txt=text, ln=True)
#         pdf.ln(8)
#
#         agent_total = 0  # Initialize agent total
#
#         for customer in datas:
#             customer_name = customer['CustomerName']
#             party_total = 0  # Initialize party total
#
#             # Display customer name
#             pdf.set_font("Arial", "B", 9)
#             pdf.cell(0, 6, f"Party: {customer_name}", ln=True)
#             pdf.ln(5)
#
#             # Table headers
#             pdf.set_font("Arial", "B", 8)
#             columns = [
#                 ("Invoice No.", 22),
#                 ("Invoice Date", 22),
#                 ("Terms", 22),
#                 ("on Acc", 23),
#                 ("Amount", 29),
#                 ("Balance", 29),
#                 ("Pending Days", 25),
#                 ("PDC", 25)
#             ]
#
#             for header, width in columns:
#                 pdf.cell(width, 6, header, border=1, ln=0, align='C')
#             pdf.ln()
#
#             # Table data
#             pdf.set_font("Arial", "", 8)
#
#             for detail in customer['party_details']:
#                 invoice_no = detail['InvoiceNo']
#                 invoice_date = detail['InvoiceDate']
#                 terms = detail['Terms']
#                 on_acc = f"{detail['OnAccount']:.2f}"
#                 amount = f"{detail['NetAmount']:.2f}"
#                 balance = f"{detail['BalanceAmount']:.2f}"
#                 overdue_days = str(detail['PendingDays'])
#                 pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"
#
#                 row = [
#                     invoice_no,
#                     invoice_date,
#                     terms,
#                     on_acc,
#                     amount,
#                     balance,
#                     overdue_days,
#                     pdc_date
#                 ]
#
#                 # Set fill color if PDC Date is present
#                 if pdc_date != "N/A":
#                     pdf.set_fill_color(255, 200, 200)  # Light red
#                 else:
#                     pdf.set_fill_color(255, 255, 255)  # White
#
#                 for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
#                     pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
#                 pdf.ln()
#
#                 party_total += detail['BalanceAmount']  # Sum the party total
#
#             # Check if there were any details, and display TDS and Party Total
#             if customer['party_details']:
#                 pdf.set_font("Arial", "B", 8)
#                 tds_text = f"TDS: {customer['party_details'][-1].get('TDSBalanceAmount', 0.00):.2f}"
#                 party_total_text = f"Party Total: {party_total:.2f}"
#
#                 pdf.cell(0, 6, tds_text, ln=0, align='L')
#                 pdf.cell(0, 6, party_total_text, ln=1, align='R')
#             pdf.ln(5)
#
#             agent_total += party_total  # Sum the agent total
#
#         # Agent Total
#         pdf.set_font("Arial", "B", 10)
#         pdf.cell(0, 6, f"Agent Total: {agent_total:.2f}", ln=True, align='R')
#         pdf.ln(10)
#
#         # pdf.ln(20)
#         # pdf.set_font("Arial", "", 9)
#         # pdf.cell(0, 6, "pdf generated by:", ln=True)
#         # pdf.cell(0, 6, "www.innalytics.in", ln=True)
#
#         # Save the PDF
#         base_dir = os.getenv("FILE_PATH", '../temp')
#         if not os.path.exists(base_dir):
#             os.makedirs(base_dir)
#         out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
#         pdf.output(out_path, 'F')
#
#         # Re-save the PDF to fix any issues with the initial write
#         out = PdfWriter()
#         file = PdfReader(out_path)
#         for page in file.pages:
#             out.add_page(page)
#         with open(out_path, "wb") as f:
#             out.write(f)
#
#         return out_path
#     except Exception as e:
#         print(str(e))

def detailed_party_pdf_format(datas, outstanding, decoded):
    try:
        # Initialize PDF
        pdf = PDF()
        pdf.add_page()

        # Title
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
        pdf.ln(2)

        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10,f"AgentName: {datas[0]['AgentName']}", ln=True, align='C')
        pdf.ln(2)


        # Initialize variables for totals
        agent_total = 0
        grand_total = 0
        company_totals = {}  # Dictionary to store totals per company

        # Loop through each customer
        current_company = None
        for customer in datas:
            customer_name = customer['CustomerName']
            company_name = customer['Company']

            if company_name != current_company:
                # If we switch to a new company, print the company name (agent name only once per company)
                if current_company is not None:
                    pdf.ln(5)

                # agent_name = customer['AgentName']
                # pdf.set_font("Arial", "B", 10)
                # pdf.cell(0, 6, f"{agent_name}", ln=True, align='C')
                # pdf.ln(5)

                pdf.set_font("Arial", "B", 13)
                pdf.cell(0, 6, f"{company_name}", ln=True, align='C')
                pdf.ln(1)

                pdf.set_font("Arial", "B", 9)
                pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True,
                         align='L')
                pdf.ln(1)

                current_company = company_name

            # Party total for the current customer
            party_total = 0

            # Display customer name
            pdf.set_font("Arial", "B", 9)
            pdf.cell(0, 6, f"Party: {customer_name}", ln=True)

            # Table headers
            pdf.set_font("Arial", "B", 8)
            columns = [
                ("Invoice No.", 22),
                ("Invoice Date", 22),
                ("Terms", 22),
                ("on Acc", 23),
                ("Amount", 29),
                ("Balance", 29),
                ("Pending Days", 25),
                ("PDC", 25)
            ]

            for header, width in columns:
                pdf.cell(width, 6, header, border=1, ln=0, align='C')
            pdf.ln()

            # Table data
            pdf.set_font("Arial", "", 8)

            for detail in customer['party_details']:
                invoice_no = detail['InvoiceNo']
                invoice_date = detail['InvoiceDate']
                terms = detail['Terms']
                on_acc = f"{detail['OnAccount']:.2f}"
                amount = f"{detail['NetAmount']:.2f}"
                balance = f"{detail['BalanceAmount']:.2f}"
                overdue_days = str(detail['PendingDays'])
                pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"

                row = [
                    invoice_no,
                    invoice_date,
                    terms,
                    on_acc,
                    amount,
                    balance,
                    overdue_days,
                    pdc_date
                ]

                # Set fill color if PDC Date is present
                if pdc_date != "N/A":
                    pdf.set_fill_color(255, 200, 200)  # Light red
                else:
                    pdf.set_fill_color(255, 255, 255)  # White

                for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
                    pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
                pdf.ln()

                party_total += detail['BalanceAmount']  # Sum the party total

            # Display TDS and Party Total
            if customer['party_details']:
                pdf.set_font("Arial", "B", 8)
                tds_text = f"TDS: {customer['party_details'][-1].get('TDSBalanceAmount', 0.00):.2f}"
                party_total_text = f"Party Total: {party_total:.2f}"

                pdf.cell(0, 6, tds_text, ln=0, align='L')
                pdf.cell(0, 6, party_total_text, ln=1, align='R')
            pdf.ln(1)

            # Add the party total to the company total and agent total
            if company_name not in company_totals:
                company_totals[company_name] = 0
            company_totals[company_name] += party_total
            agent_total += party_total

        # After the loop ends, add all company totals to grand total
        grand_total += agent_total

        # Display company totals, agent total, and grand total
        pdf.set_font("Arial", "B", 10)

        # Print each company's total
        for company_name, total in company_totals.items():
            pdf.cell(0, 6, f"{company_name} Total: {total:.2f}", ln=True, align='R')
        pdf.cell(0, 6, f"Grand Total: {agent_total:.2f}", ln=True, align='R')
        pdf.ln(10)

        # Save the PDF
        base_dir = os.getenv("FILE_PATH", '../temp')
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
        pdf.output(out_path, 'F')

        # Re-save the PDF to fix any issues with the initial write
        out = PdfWriter()
        file = PdfReader(out_path)
        for page in file.pages:
            out.add_page(page)
        with open(out_path, "wb") as f:
            out.write(f)

        return out_path

    except Exception as e:
        print(str(e))


# ------------------------------------------------------------> 3rd download full party details for customer

def get_outstanding_party_details_overview_pdf(request, decoded):
    try:
        config_details = get_table_config_details(request, decoded)
        if config_details and len(config_details) > 0:
            res, outstanding, main_table = get_party_details_data(config_details[0][0], config_details[0][1], request)
            outstanding_details = get_outstanding_party_details_total(outstanding, request)
            base64string = generate_party_details_pdf(res, request, outstanding_details, main_table, decoded)
            return {"base64string": file_to_base64(base64string), "file_name": str(decoded['comp_name']) + "party_details_Outstanding.Pdf"}
    except Exception as e:
        print(str(e))

def get_party_details_data(report_table, report_config_fk, request):  # getting agent_info, main_table, outstanding total
    qry = "select main_table, outstanding_party_details_total, party_details from Reporting." + str(
        report_table) + " where report_config_pk =" + str(report_config_fk)
    res = py_connection.get_result(qry)
    return get_each_party_details(request['agent_id'], request['customer_id'], res[0][2], request['company']), res[0][1], res[0][0]  # getting basic agent details


def get_outstanding_party_details_total(procedure_name, request):
    try:
        qry = '{call Reporting.' + str(procedure_name) + '(?,?,?,?,?,?)}'
        res, k = py_connection.call_prop_col(qry, (request["agent_id"], request['customer_id'], 0, 0, 1, request['company']))
        if res and len(res) > 0:
            value = int(res[0][0])
            date = res[0][1]
            customers = res[0][2]
            return value, date, customers
        else:
            return '', '', ''
    except Exception as e:
        print(str(e))
        return '', '', ''


def generate_party_details_pdf(res, request, outstanding, main_table, decoded):
    try:
        # Initialize PDF
        pdf = PDF()
        pdf.add_page()

        # Title
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 10, decoded['comp_name'], ln=True, align='C')
        pdf.ln(2)

        agent_name = res[0]['AgentName']  # Agent name is common across all customers
        company = request['company']
        page_width = pdf.w - 2 * pdf.l_margin

        # Center agent name
        pdf.set_font("Arial", "B", 13)
        agent_text = f"AgentName: {agent_name}"
        agent_text_width = pdf.get_string_width(agent_text)
        pdf.set_x((page_width - agent_text_width) / 2)
        pdf.cell(agent_text_width, 8, txt=agent_text, ln=True, align='C')  # Centered agent name
        pdf.ln(3)

        # Center company name
        pdf.set_font("Arial", "B", 12)
        company_text_width = pdf.get_string_width(company)
        pdf.set_x((page_width - company_text_width) / 2)
        pdf.cell(company_text_width, 6, company, ln=True, align='C')  # Centered company name

        pdf.ln(2)  # Add a small line break

        pdf.set_font("Arial", "B", 9)
        pdf.cell(0, 10, 'Agent and Party Wise Outstanding Balance Details as on ' + outstanding[1], ln=True, align='L')
        pdf.ln(2)

        # Calculating total amount
        # total_amount = sum(customer['BalanceAmount'] for customer in res)
        # pdf.set_font("Arial", "B", 10)
        # pdf.cell(0, 6, f"Agent Total: {total_amount:.2f}", ln=True)
        # pdf.ln(4)

        # Centered agent name
        # pdf.set_font("Arial", "B", 10)
        # text = f"Agent: {agent_name}"
        # text_width = pdf.get_string_width(text)
        # page_width = pdf.w - 2 * pdf.l_margin
        # x_position = (page_width - text_width) / 2
        # pdf.set_x(x_position)
        # pdf.cell(text_width, 8, txt=text, ln=True, align='C')
        # pdf.ln(8)

        # Set the font and display the company name for the current agent
        pdf.set_font("Arial", "B", 12)

        # Group data by CustomerName
        customer_group = {}
        for entry in res:
            customer_name = entry['CustomerName']
            if customer_name not in customer_group:
                customer_group[customer_name] = []
            customer_group[customer_name].append(entry)

        agent_total = 0  # Initialize agent total
        for customer_name, details in customer_group.items():
            party_total = 0  # Initialize party total

            # Display customer name
            pdf.set_font("Arial", "B", 9)
            pdf.cell(0, 6, f"Party: {customer_name}", ln=True)

            # Table headers
            pdf.set_font("Arial", "B", 8)
            columns = [
                ("Invoice No.", 22),
                ("Invoice Date", 22),
                ("Terms", 22),
                ("On Acc", 23),
                ("Amount", 29),
                ("Balance", 29),
                ("Pending Days", 25),
                ("PDC", 25)
            ]

            for header, width in columns:
                pdf.cell(width, 6, header, border=1, ln=0, align='C')
            pdf.ln()

            # Table data
            pdf.set_font("Arial", "", 8)

            for detail in details:
                invoice_no = detail['InvoiceNo']
                invoice_date = detail['InvoiceDate']
                terms = detail['Terms']
                acc_no = f"{detail['OnAccount']:.2f}"
                amount = f"{detail['NetAmount']:.2f}"
                balance = f"{detail['BalanceAmount']:.2f}"
                overdue_days = str(detail['PendingDays'])
                pdc_date = detail['PDCDate'] if detail['PDCDate'] else "N/A"

                row = [
                    invoice_no,
                    invoice_date,
                    terms,
                    acc_no,
                    amount,
                    balance,
                    overdue_days,
                    pdc_date
                ]

                # Set fill color if PDC Date is present
                if pdc_date != "N/A":
                    pdf.set_fill_color(255, 200, 200)  # Light red
                else:
                    pdf.set_fill_color(255, 255, 255)  # White

                for value, width in zip(row, [22, 22, 22, 23, 29, 29, 25, 25]):
                    pdf.cell(width, 6, value, border=1, ln=0, align='C', fill=True)
                pdf.ln()

                party_total += detail['BalanceAmount']  # Sum the party total

            # Display TDS and Party Total
            pdf.set_font("Arial", "B", 8)
            tds_text = f"TDS: {details[-1].get('TDSBalanceAmount', 0.00):.2f}"
            party_total_text = f"Party Total: {party_total:.2f}"

            pdf.cell(0, 6, tds_text, ln=0, align='L')
            pdf.cell(0, 6, party_total_text, ln=1, align='R')
            pdf.ln(5)

            agent_total += party_total  # Sum the agent total

        # Agent Total
        pdf.set_font("Arial", "B", 10)
        pdf.cell(0, 6, f"Agent Total: {agent_total:.2f}", ln=True, align='R')
        pdf.ln(10)

        # pdf.ln(20)
        # pdf.set_font("Arial", "", 9)
        # pdf.cell(0, 6, "pdf generated by:", ln=True)
        # pdf.cell(0, 6, "www.innalytics.in", ln=True)

        # Save the PDF
        base_dir = os.getenv("FILE_PATH", '../temp')
        if not os.path.exists(base_dir):
            os.makedirs(base_dir)
        out_path = os.path.join(base_dir, str(uuid.uuid4()) + ".pdf")
        pdf.output(out_path, 'F')

        # Re-save the PDF to fix any issues with the initial write
        out = PdfWriter()
        file = PdfReader(out_path)
        for page in file.pages:
            out.add_page(page)
        with open(out_path, "wb") as f:
            out.write(f)

        return out_path
    except Exception as e:
        print(str(e))

